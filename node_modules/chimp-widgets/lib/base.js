// Generated by CoffeeScript 1.9.2
(function() {
  var Base,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = (function() {
    function Base(properties) {
      var key, value;
      for (key in properties) {
        value = properties[key];
        this[key] = value;
      }
    }

    Base.extend = function(extension) {
      var Constructor, Extended, key, ref;
      Constructor = null;
      Extended = (function(superClass) {
        extend(_Class, superClass);

        function _Class() {
          if (Constructor != null) {
            Constructor.apply(this, arguments);
          } else {
            _Class.__super__.constructor.apply(this, arguments);
          }
        }

        return _Class;

      })(this);
      if (typeof extension === 'function') {
        extension = extension.call(Extended);
      } else {
        extension = extension != null ? extension : {};
      }
      Constructor = (ref = extension.Constructor) != null ? ref : null;
      for (key in extension) {
        Extended.prototype[key] = extension[key];
      }
      return Extended;
    };

    Base.create = function() {
      var Context, args, wrapper;
      args = arguments;
      Context = this;
      wrapper = function() {
        return Context.apply(this, args);
      };
      extend(wrapper, Context);
      return new wrapper();
    };

    Base.mixin = function(mixin) {
      var isPlainObject, key, results, value;
      isPlainObject = function(value) {
        return _.isObject(value) && !_.isArray(value) && !_.isFunction(value);
      };
      results = [];
      for (key in mixin) {
        value = mixin[key];
        if (isPlainObject(value) && isPlainObject(this.prototype[key])) {
          results.push(_.extend(this.prototype[key], value));
        } else {
          results.push(this.prototype[key] = value);
        }
      }
      return results;
    };

    return Base;

  })();

  module.exports = Base;

}).call(this);
