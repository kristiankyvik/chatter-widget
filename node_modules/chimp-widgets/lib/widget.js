// Generated by CoffeeScript 1.9.2
(function() {
  var Base, Promise, Widget, driver,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  driver = require('./webdriver');

  Base = require('./base');

  Widget = (function(superClass) {
    var generateApiMethod, i, len, method, ref;

    extend(Widget, superClass);

    Widget.url = null;

    Widget.visit = function(wait) {
      if (wait == null) {
        wait = 5000;
      }
      return Promise.promisify(driver.api.url, driver.api)(this.url).then((function(_this) {
        return function() {
          var screen;
          screen = new _this();
          return screen.waitForExist(wait).then(function() {
            return screen;
          });
        };
      })(this));
    };

    Widget.prototype.driver = null;

    Widget.prototype.selector = null;

    function Widget(selector, driver1, Promise1) {
      this.driver = driver1 != null ? driver1 : driver.api;
      this.Promise = Promise1 != null ? Promise1 : Promise;
      if (this.selector == null) {
        this.selector = selector;
      }
      if (!typeof this.selector === 'string') {
        throw new Error("Invalid selector given: " + this.selector);
      }
    }

    Widget.prototype.find = function(nestedSelector) {
      return new Widget(this.selector + " " + nestedSelector);
    };

    Widget.prototype.hasText = function(expected) {
      return this.getText().should.eventually.become(expected);
    };

    Widget.prototype._promisifyWebdriverApi = function(method, callArgs) {
      return new Promise((function(_this) {
        return function(fulfill, reject) {
          callArgs.unshift(_this.selector);
          callArgs.push(function(error, result) {
            if (error != null) {
              return reject(error);
            } else {
              return fulfill(result);
            }
          });
          return _this.driver[method].apply(_this.driver, callArgs);
        };
      })(this));
    };

    Widget.API = ['addValue', 'clearElement', 'click', 'doubleClick', 'dragAndDrop', 'leftClick', 'middleClick', 'moveToObject', 'rightClick', 'setValue', 'submitForm', 'getAttribute', 'getCssProperty', 'getElementSize', 'getHTML', 'getLocation', 'getLocationInView', 'getSource', 'getTagName', 'getText', 'getTitle', 'getValue', 'isEnabled', 'isExisting', 'isSelected', 'isVisible', 'waitForChecked', 'waitForEnabled', 'waitForExist', 'waitForSelected', 'waitForText', 'waitForValue', 'waitForVisible'];

    generateApiMethod = function(method) {
      return function() {
        var callArgs;
        callArgs = Array.prototype.slice.call(arguments);
        return this._promisifyWebdriverApi(method, callArgs);
      };
    };

    ref = Widget.API;
    for (i = 0, len = ref.length; i < len; i++) {
      method = ref[i];
      Widget.prototype[method] = generateApiMethod(method);
    }

    return Widget;

  })(Base);

  module.exports = Widget;

}).call(this);
